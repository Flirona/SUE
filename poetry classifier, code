# -*- coding: utf-8 -*-
"""
Created on Tue Aug 08 11:34:52 2017

@author: Florina
"""
#MODULES USED
import os, io
import pandas as pd
import numpy as np

from sklearn.feature_extraction.text import CountVectorizer
from sklearn import metrics
from sklearn.linear_model import LogisticRegressionCV

#UPLOADING THE DATAFILES
root = 'C:\\Users\\Florina\\Desktop\\SUE\\digte\\RAW'
os.chdir(root)

dirnames = ['/maskineRAW/','/menneskeRAW/']

alldircontent = []
alldirfilenames = []
for dirname in dirnames:    
    dirpath = root+dirname    
    dircontent=[]    
    filenames = os.listdir(dirpath)    
    alldirfilenames.append(filenames)    
    for filename in filenames:        
        fullpath = dirpath + '/' + filename        
        with io.open(fullpath, 'r', encoding = 'latin-1') as f:            
            text = f.read()        
        dircontent.append(text)    
    alldircontent.append(dircontent)

labels = ['maskine','menneske']
alllabels = []
for i in range(len(alldircontent)):
    lab = labels[i]
    tmp = []
    for elem in alldircontent[i]:
        tmp.append(lab)
    alllabels.append(tmp)

labels_list = [item for sublist in alllabels for item in sublist]
text_list = [item for sublist in alldircontent for item in sublist]
title_list = [item for sublist in alldirfilenames for item in sublist]

data = pd.DataFrame()
data['title'] = title_list
data['text'] = text_list
data['label'] = labels_list
 
text_clean=[]
for text in data['text']:
    text = text.rstrip()
    text_clean.append(text)

data['text_clean'] = text_clean

#TRAINING THE MODEL
ratio = 0.8
mask = np.random.rand(len(data)) < ratio
data_train = data[mask]
data_test = data[~mask]

train_x = data_train['text_clean'].values
train_y = data_train['label'].values

test_x = data_test['text_clean'].values
test_y = data_test['label'].values

vecSpc = CountVectorizer(encoding = 'latin-1')
train_feat = vecSpc.fit_transform(train_x)

clf = LogisticRegressionCV()
clf.fit(train_feat, train_y)

test_feat = vecSpc.transform(test_x)
pred = clf.predict(test_feat)

#EXPLORING THE PREDICTIONS
print metrics.confusion_matrix(test_y, pred)
print metrics.accuracy_score(test_y, pred)
print metrics.classification_report(test_y, pred)

for i, char in enumerate(data_test.index.values):
    print char, test_y[i], pred[i]

print data_test["text_clean"][55]
print data_test["title"]
